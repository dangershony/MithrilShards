using System;
using System.Collections.Generic;
using System.Text;
using Network.Protocol.Messages.Types;

namespace Protocol.Channels
{
   /// One counterparty's public keys which do not change over the life of a channel.
   public class ChannelPublicKeys
   {
      /// The public key which is used to sign all commitment transactions, as it appears in the
      /// on-chain channel lock-in 2-of-2 multisig output.
      public PublicKey FundingPubkey { get; set; }

      /// The base point which is used (with derive_public_revocation_key) to derive per-commitment
      /// revocation keys. This is combined with the per-commitment-secret generated by the
      /// counterparty to create a secret which the counterparty can reveal to revoke previous
      /// states.
      public PublicKey RevocationBasepoint { get; set; }

      /// The public key on which the non-broadcaster (ie the countersignatory) receives an immediately
      /// spendable primary channel balance on the broadcaster's commitment transaction. This key is
      /// static across every commitment transaction.
      public PublicKey PaymentPoint { get; set; }

      /// The base point which is used (with derive_public_key) to derive a per-commitment payment
      /// public key which receives non-HTLC-encumbered funds which are only available for spending
      /// after some delay (or can be claimed via the revocation path).
      public PublicKey DelayedPaymentBasepoint { get; set; }

      /// The base point which is used (with derive_public_key) to derive a per-commitment public key
      /// which is used to encumber HTLC-in-flight outputs.
      public PublicKey HtlcBasepoint { get; set; }
   }
}